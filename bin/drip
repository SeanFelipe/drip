#!/usr/bin/env bash

declare -a jvm_args
declare -a main_args
declare -a runtime_args

function jar_main_class {
    local jar=$1
    local line=$(unzip -p $jar META-INF/MANIFEST.MF | grep ^Main-Class:)
    local main_class=$(expr -- "$line" : 'Main-Class: \([^[:space:]]*\)')
    echo $main_class
}

function parse_args {
    unset drip_command java_command
    if [[ $# -eq 0 ]]; then
        # no arguments provided
        echo 'Usage: drip [command | same args as java]'
        echo
        echo 'drip supports the following commands:'
        echo '    version          print drip version and exit'
        echo '    upgrade          upgrade drip to the latest version'
        echo '    kill [-signal]   kill all idle drip JVMs (with signal)'
        echo '    ps               print a list of all drip processes'
        exit 0
    elif ! expr -- "$1" : '.*[.-]' > /dev/null; then
        drip_command=$1
        return
    elif [[ $# -eq 1 && $1 == -* ]]; then
        java_command=$1
        return
    fi

    unset classpath main_class main_args runtime_args context
    for arg in "$@"; do
        if [[ -z $main_class ]]; then
            if [[ -z $context ]]; then
                if [[ $arg == "-cp" || $arg == "-classpath" ]]; then
                    context='-cp'
                elif [[ $arg == "-jar" ]]; then
                    context='-jar'
                elif [[ $arg == --* ]]; then
                    runtime_args+=("${arg:1}")
                elif [[ $arg != -* ]]; then
                    main_class=$arg
                else
                    jvm_args+=("$arg")
                fi
            else
                classpath=$arg
                if [[ $context == '-jar' ]]; then
                    main_class=$(jar_main_class $arg)
                fi
                unset context
            fi
        else
            main_args+=("$arg")
        fi
    done
    main_class=${main_class//\//.}
}

function bootstrap {
    drip_root=$DRIP_HOME/$DRIP_VERSION
    drip_src=$drip_root/src
    mkdir -p "$drip_root"

    script="$0"

    # Adapted from http://github.com/technomancy/leiningen
    # resolve symlinks to the script itself portably
    while [[ -h $script ]] ; do
        local ls=$(ls -ld -- "$script")
        local link=$(expr -- "$ls" : '.*-> \(.*\)$')
        if expr -- "$link" : '/.*' > /dev/null; then
            script=$link
        else
            script=$(dirname "$script"$)/$link
        fi
    done

    local bin_dir=$(dirname $script)
    drip_dir=$bin_dir/..
    if [[ -r $drip_dir/src/org/flatland/drip/Main.java ]]; then
        # Checkout or package
        if [[ -d $drip_dir/.git ]]; then
            drip_install=checkout
        else
            drip_install=package
        fi

        drip_jar=$drip_dir/drip.jar
        (cd -- "$drip_dir" && make -s) || exit 1
        drip_proxy=$bin_dir/drip_proxy
        drip_daemon=$bin_dir/drip_daemon
    else
        # Standalone
        drip_dir=
        drip_install=standalone
        drip_jar=$(mvn_get 'drip' 'org/flatland' "$DRIP_VERSION" "$DRIP_JAR_URL")

        drip_proxy=$(compile 'drip_proxy')
        drip_daemon=$(compile 'drip_daemon')
        [[ -e $drip_proxy && -e $drip_daemon ]] || exit 1
    fi
}

function make_sha_path {
    opts="$PWD ${jvm_args[*]} $classpath $main_class"
    sha=$(echo -n "$opts" | git hash-object --stdin)890
    sha_path=$drip_root/$sha
    echo "make_sha_path: $sha_path"
    mkdir -p "$sha_path"
    echo -n "$opts" > $sha_path/opts
    echo "make_sha_path: $sha_path"
}

function default_init {
    local f='%s\n%s'
    case $main_class in
        org.jruby.Main)
            DRIP_INIT_CLASS='org.jruby.main.DripMain'
            DRIP_INIT=$(printf $f '1 + 1');;
    esac
}

function launch_jvm {
    jvm_dir=$sha_path/$$-$n

    echo "in launch_jvm with jvm_dir: $jvm_dir"

    if mkdir "$jvm_dir"; then
        mkfifo "$jvm_dir/control"
        echo "mkfifo complete"

        if [[ -z $DRIP_INIT_CLASS ]]; then
            echo "default_init"
            default_init
        fi
        export DRIP_INIT_CLASS=${DRIP_INIT_CLASS//\//.}
        export DRIP_INIT

        echo "executing money shot"
        $drip_daemon $DRIP_JAVA_CMD "${jvm_args[@]}" -Djava.awt.headless=true \
                                    "-classpath" "$drip_jar:$classpath" \
                                    org.flatland.drip.Main "$main_class" "$jvm_dir" \
                                    > /dev/null 2> $drip_root/error.log
        echo "complete."
    fi
}

function kill_jvm {
    local signal=$1
    local pid=$(cat "$jvm_dir/jvm.pid" 2> /dev/null)
    kill "$signal" $pid 2> /dev/null
}

function lock_dir {
    if mkdir "$jvm_dir/lock" 2> /dev/null; then
        if kill_jvm -0; then
            echo $$ > "$jvm_dir/client.pid"
            active_jvm_dir=$jvm_dir
            return 0
        else
            rm -rf "$jvm_dir"
        fi
    fi
    return 0
}

function find_jvm {
    make_sha_path

    for jvm_dir in $sha_path/*-*; do
        if [[ -z $active_jvm_dir ]]; then
            lock_dir
        elif [[ ! -e $jvm_dir/lock ]]; then
            let n=$n+1
        fi
    done

    n=${n:-0}

    while (( $n < $DRIP_POOL )); do
        let n=$n+1
        launch_jvm
    done

    if [[ -z $active_jvm_dir ]]; then
        exec "$DRIP_JAVA_CMD" "${jvm_args[@]}" "${runtime_args[@]}" \
                              "-classpath" "$classpath" \
                              "$main_class" "${main_args[@]}"
    fi
}

function kill_jvms {
    local killed=false

    for version_dir in $DRIP_HOME/*; do
        [[ -d $version_dir ]] || continue
        for sha_dir in $version_dir/*; do
            [[ -d $sha_dir ]] || continue
            [[ $sha_dir != $version_dir/src ]] || continue
            for jvm_dir in $sha_dir/*-*; do
                [[ -d $jvm_dir ]] || continue
                if lock_dir; then
                    kill_jvm "$1"
                    rm -rf "$jvm_dir"
                    killed=true
                fi
            done
            local dirs=($sha_dir/*)
            if [[ "${dirs[*]}" == "$sha_dir/opts" ]]; then
                rm -rf "$sha_dir"
            fi
        done
    done

    $killed || echo "No idle Drip JVM running"
}

function send_array {
    local string=$*
    local length=${#string}
    (( $length != 0 )) && let length=length+1

    printf '%s:' "$length"
    for e; do
        printf -- '%s\0' "$e"
    done
    printf ','
}

function send_env {
    declare -a vars

    # Call declare in a bash subprocess to get rid of variables that aren't exported.
    while read -r line; do
        [[ $line == *=\(*\) ]] && continue # Filter bash arrays
        [[ $line != *=*     ]] && break    # Filter function definitions

        # Filter extra variables that were added by the bash subprocess but are not exported.
        for var in BASH BASHOPTS BASH_EXECUTION_STRING BASH_VERSION \
                   SHELLOPTS IFS PS4 UID EUID PPID; do
            [[ $line == $var=*  ]] && continue 2
        done

        vars+=("$(eval echo $line)")
    done <<< "$(bash -c declare)"

    send_array "${vars[@]}"
}

function send_args {
    mkfifo "$active_jvm_dir/status"
    exec 4> "$active_jvm_dir/control"
    send_array "${main_args[@]}" >&4
    send_array "${runtime_args[@]}" >&4
    send_env >&4
    exec 4>&-
}

function wait_for_exit {
    status=$(cat "$active_jvm_dir/status")
    rm -rf "$active_jvm_dir"
}

function run_main {
    send_args
    $drip_proxy "$active_jvm_dir"

    wait_for_exit
}



# Let's go.

DRIP_VERSION=0.2.5.spw4N0
DRIP_POOL=${DRIP_POOL:-1}
DRIP_HOME=${DRIP_HOME:-~/.drip}
DRIP_JAVA_CMD=${DRIP_JAVA_CMD:-java}
DRIP_JAVA_CMD=$(which $DRIP_JAVA_CMD)

bootstrap
parse_args "$@"

if [[ -z $drip_command ]]; then
    [[ -z $java_command ]] || exec "$DRIP_JAVA_CMD" $java_command
    find_jvm
    run_main

    exit $status
fi

